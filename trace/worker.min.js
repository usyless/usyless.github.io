self.importScripts("./a.out.js");
const typeMap={setCurrent,removeImage,setData:addImage,getHistoryStatus,clearTrace:clear,undoTrace:undo,redoTrace:redo,eraseRegion,smoothTrace,exportTrace,addPoint:point,autoTrace:auto,trace,snapLine,getPixelColour,getCurrentPath},api={create_buffer:Module.cwrap("create_buffer","number",["number","number"]),setCurrent:Module.cwrap("setCurrent","",["string"]),addImage:Module.cwrap("addImage","",["string","number","number","number"]),removeImage:Module.cwrap("removeImage","",["string"]),historyStatus:Module.cwrap("historyStatus",
"number"),trace:Module.cwrap("trace","string",["number","number","number"]),point:Module.cwrap("point","string",["number","number"]),undo:Module.cwrap("undo","string"),redo:Module.cwrap("redo","string"),eraseRegion:Module.cwrap("eraseRegion","string",["number","number"]),smoothTrace:Module.cwrap("smoothTrace","string"),clear:Module.cwrap("clear",""),auto:Module.cwrap("autoTrace","string",["number"]),exportTrace:Module.cwrap("exportTrace","string","number number number number number number number number number number number number".split(" ")),
snap:Module.cwrap("snap","number",["number","number","number"]),getPixelColour:Module.cwrap("getPixelColour","number",["number","number"]),getCurrentPath:Module.cwrap("getCurrentPath","string")};let initialised=!1;const preInitQueue=[],messageListener=a=>{if(initialised){a=a.data;let b;try{b=typeMap[a.type](a)}catch(c){console.error(c.message),b={type:"error",message:"Out of memory, please refresh the site. (You must have loaded a LOT of images at once)"}}b&&postMessage(b)}else preInitQueue.push(a)};
function onLoad(){console.info("WASM Initialised, ready to trace.");initialised=!0;for(const a of preInitQueue)messageListener(a)}onmessage=messageListener;function setCurrent(a){api.setCurrent(a.src)}function addImage(a){const b=api.create_buffer(a.width,a.height);Module.HEAPU8.set(a.data,b);api.addImage(a.src,b,parseInt(a.width),parseInt(a.height));return{src:a.src,type:a.type}}function removeImage(a){api.removeImage(a.src)}
function getHistoryStatus(a){const b=api.historyStatus();a.undo=!!((b&2)>>1);a.redo=!!(b&1);return a}function trace(a){return defaultTraceResponse(a,api.trace(parseInt(a.x),parseInt(a.y),parseInt(a.colourTolerance)))}function point(a){return defaultTraceResponse(a,api.point(parseInt(a.x),parseInt(a.y)))}function auto(a){return defaultTraceResponse(a,api.auto(parseInt(a.colourTolerance)))}function undo(a){return defaultTraceResponse(a,api.undo())}
function redo(a){return defaultTraceResponse(a,api.redo())}function eraseRegion(a){return defaultTraceResponse(a,api.eraseRegion(parseInt(a.begin),parseInt(a.end)))}function smoothTrace(a){return defaultTraceResponse(a,api.smoothTrace())}function clear(a){return defaultTraceResponse(a,api.clear())}
function exportTrace(a){a.export=api.exportTrace(parseInt(a.PPO),"tab"===a.delim?1:0,parseFloat(a.lowFR),parseFloat(a.highFR),parseFloat(a.SPL.top),parseFloat(a.SPL.topPixel),parseFloat(a.SPL.bottom),parseFloat(a.SPL.bottomPixel),parseFloat(a.FR.top),parseFloat(a.FR.topPixel),parseFloat(a.FR.bottom),parseFloat(a.FR.bottomPixel));return a}function snapLine(a){a.line.position=api.snap(parseInt(a.line.position),"x"===a.line.direction?1:0,parseInt(a.direction));return a}
function getPixelColour(a){const b=api.getPixelColour(parseInt(a.x),parseInt(a.y));a.pixelColour=`${b>>16}, ${b>>8&255}, ${b&255}`;return a}function getCurrentPath(a){return defaultTraceResponse(a,api.getCurrentPath())}function defaultTraceResponse(a,b){a.svg=b;return a};
